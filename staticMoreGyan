
5
down vote
Static variables live the life of the program, there is only one copy

Locals (Autos) get a new copy on the stack each function call.

Parameters passed by value get a new copy as well.

Parameters passed by reference (pointer) point to the copy that's passed to them. Therefore if it's a local in a recursive execution, it might be a unique copy; but usually it's a reference to a variable that called the function before the recursion started, therefore, the same copy.

It's better to do the functionality you're doing by passing a pointer to a variable, you have more control over subsequent instances of recursion.


--------------------------------------------------------------------------------------------------------------------------------

up vote
4
down vote
Your understanding fairly accurate.

static means there is one version of the variable. Each time a function is called that contains a static variable the variable will have the last value assigned to it. A global variable can also be marked static which means its scope is limited to that file.

When a function is called its local variables are placed on the call stack. This stack is pushed for each function call and then popped when each function exists. A recursive call just keeps pushing a new copy of the same function onto the stack.

-------------------------------------------------------------------------------------------------------------------

If a variable is declared static in a function, will the same variable/same copy be used for all recursive calls of that function?

Yes, as your code sample shows

If the variable is not declared static (e.g, simply "int x"), will each recursive call to the function have its own copy of that variable? If yes, is that the way it normally happens when a function is called from other function, including the recursive calls?

Yes, each call will have it's own stack frame with a copy of each local variable. This is what happens for every function call, whether they are recursive or not. And yes, this very principle allows, among other things, recursion.
